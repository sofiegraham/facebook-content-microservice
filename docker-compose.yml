version: "3"
services:
  web:
    image: sofiegraham/content-microservice:latest
    deploy:
      replicas: 1
      # resources:
        # limits:
        #   cpus: "0.1" # limiting each replica to use, at most, 10% of the CPU (across all cores), and 50MB of RAM.
        #   memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "80:9000"
    networks: # this is the load balanced network called webnet # if you use the overlay network, but you could also remove the service networks configuration to bypass that. Then you would have to publish the port of the service you want to expose.
      - webnet
    environment:
      REDIS_PORT: 6379
      REDIS_HOST: redis
      SERVER_PORT: 9000
      POSTGRES_DB: content
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      SEED_USER_COUNT: 1000
      SEED_PAGE_COUNT: 5000
      SEED_PAGE_LIKE_COUNT: 20000
      SEED_POST_COUNT: 100000
      SEED_POST_LIKE_COUNT: 50000
      SEED_USER_FRIEND_COUNT: 50000
      NEW_RELIC_KEY: 765b55cfedfa781c10af9e52a1531084668c7cf5
      NODE_ENV: production
      AWS_SQS_URL: https://sqs.us-east-2.amazonaws.com/123248820815/content-POST-posts
    depends_on:
     - postgres
     - redis
  postgres:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: content
      POSTGRES_PASSWORD: password123
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet: